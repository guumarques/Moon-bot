package Events.Instagram.Buttons;

import Commands.ConnectionDB;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import net.dv8tion.jda.api.events.interaction.ModalInteractionEvent;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.ItemComponent;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.interactions.components.text.TextInput;
import net.dv8tion.jda.api.interactions.components.text.TextInputStyle;
import net.dv8tion.jda.api.interactions.modals.Modal;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class CommentButton extends ListenerAdapter {

    @Override
    public void onButtonInteraction(ButtonInteractionEvent event) {
        if (event.getComponentId().equals("comentar")) {

            TextInput commentInput = TextInput.create("comentario", "Digite seu coment√°rio", TextInputStyle.PARAGRAPH).build();

            Modal modal = Modal.create("modal_comentario", "Coment√°rios")
                    .addActionRow(commentInput)
                    .build();

            try {
                event.deferReply().queue(); // Reconhece a intera√ß√£o imediatamente
                event.replyModal(modal).queue();
            } catch (Exception e) {
                e.printStackTrace();
                event.reply("Ocorreu um erro ao processar sua solicita√ß√£o.").setEphemeral(true).queue();
            }
        }
    }

    private int updateComments(Long postId, String memberID, String comment) {
        try {
            SimpleDateFormat data = new SimpleDateFormat("dd/MM/yyyy");
            String dataFormatada = data.format(new Date());

            String insertQuery = "INSERT INTO comments (post_id, member_id, comment, date_commented) VALUES (?, ?, ?, ?)";
            PreparedStatement insertStatement = ConnectionDB.getInstagramConnection().prepareStatement(insertQuery);
            insertStatement.setLong(1, postId);
            insertStatement.setString(2, memberID);
            insertStatement.setString(3, comment);
            insertStatement.setString(4, dataFormatada);
            insertStatement.executeUpdate();

            String countQuery = "SELECT COUNT(*) FROM comments WHERE post_id = ?";
            PreparedStatement countStatement = ConnectionDB.getInstagramConnection().prepareStatement(countQuery);
            countStatement.setLong(1, postId);
            ResultSet countResult = countStatement.executeQuery();

            if (countResult.next()) {
                return countResult.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return -1;
    }

    private void updateButton(ModalInteractionEvent event, int commentCount) {
        Message message = event.getMessage();
        List<ActionRow> actionRows = message.getActionRows();
        List<ItemComponent> components = new ArrayList<>();

        for (ActionRow row : actionRows) {
            for (ItemComponent component : row.getComponents()) {
                if (component instanceof Button) {
                    Button button = (Button) component;
                    if (!button.getId().equals("comentar")) {
                        components.add(button);
                    }
                } else {
                    components.add(component);
                }
            }
        }

        Button newCommentButton = Button.secondary("comentar", String.valueOf(commentCount)).withEmoji(Emoji.fromUnicode("üí¨"));
        components.add(newCommentButton);

        event.getMessage().editMessageComponents(ActionRow.of(components)).queue();
    }

    @Override
    public void onModalInteraction(ModalInteractionEvent event) {
        if (event.getModalId().equals("modal_comentario")) {
            Message message = event.getMessage();
            Member member = event.getMember();
            String memberID = member.getId();
            long postID = message.getIdLong();
            String comentario = event.getValue("comentario").getAsString();

            int contadorComments = updateComments(postID, memberID, comentario);

            updateButton(event, contadorComments);
            event.reply("Coment√°rio postado com sucesso!").setEphemeral(true).queue();
        }
    }
}